#version 130

#pragma debug(on)
#pragma optimize(off) 

#ifdef PI
#undef PI
#endif
#define PI 3.141592

uniform mat4 Model;
uniform mat4 InversedModel;
uniform mat4 View;
uniform mat4 Projection;

uniform vec3 LightPosition;
uniform vec3 EyePosition;
uniform vec4 LightColor;

in vec3 Position;
in vec4 VertexColor;
in vec3 Normal;

out vec4 FragmentColor;

void main(void)
{
    gl_Position = Projection * View * Model * vec4(Position, 1.0);

	float fAmbientStrength = 0.1;
	vec4 vAmbientContribution = fAmbientStrength * LightColor;

	mat3 mNormalMatrix = mat3(transpose(InversedModel));
	vec3 vNormal = normalize(mNormalMatrix * Normal);
	vec4 vWorldVertexPos = Model * vec4(Position, 1.0);
	vec3 vLight = normalize(LightPosition - vWorldVertexPos.xyz);
	vec4 vDiffusionContribution = max(dot(vNormal, vLight), 0.0) * LightColor;

////vec3 vView = normalize(EyePosition - vWorldVertexPos.xyz);
////vec3 vReflect = reflect(-vLight, vNormal);

////float fSpecular = max(dot(vReflect, vView), 0.5);
////fSpecular = pow(fSpecular, 16.0);
////vec4 vSpecularContribution = fSpecular * LightColor;

	vec4 LightContribution = vAmbientContribution + vDiffusionContribution/* + vSpecularContribution*/;

	FragmentColor = LightContribution * VertexColor;
}
